type
  TRSClient = type Pointer;

  TPoint3D = record
    X, Y, Z: Integer;
  end;

var
  RSClient: TRSClient;

const
  __SETTING_COUNT = 2000;

function TRSCLient.getString(address: Integer): String;
begin
  setLength(result, 1024);
  setLength(result, smartStringFromString(smartCurrentTarget, address, result));
  result := replace(result, 'Ã‚', '', [rfReplaceAll]);
  result := replace(result, #160, #32, [rfReplaceAll]);
end;

function TRSClient.getSettingsArray: TIntegerArray;
var
  I: Integer;
begin
  setLength(result, __SETTING_COUNT);
  for I := 0 to __SETTING_COUNT - 1 do
    result[I] := smartGetFieldArrayInt(smartCurrentTarget, 0, client_settings, I);
end;

function TRSClient.getSetting(index: Integer): Integer;
var
  settings: TIntegerArray;
begin
  if ((index >= __SETTING_COUNT) or (index < 0)) then
    exit(-1);
  settings := self.getSettingsArray;
  result := settings[index];
end;

function TRSClient.getCameraPitch: Integer;
begin
  result := smartGetFieldInt(smartCurrentTarget, 0, client_cameraPitch) * client_cameraPitch_Multiplier;
end;

function TRSClient.getCameraYaw: Integer;
begin
  result := smartGetFieldInt(smartCurrentTarget, 0, client_cameraYaw) * client_cameraYaw_Multiplier;
end;

function TRSClient.getCameraPosition: TPoint3D;
begin
  result.X := smartGetFieldInt(smartCurrentTarget, 0, client_cameraX) * client_cameraX_Multiplier;
  result.Y := smartGetFieldInt(smartCurrentTarget, 0, client_cameraY) * client_cameraY_Multiplier;
  result.Z := smartGetFieldInt(smartCurrentTarget, 0, client_cameraZ) * client_cameraZ_Multiplier;
end;

function TRSClient.getUpText: String;
begin
  writeln('Warning: TRSClient.getUpText has not been implemented yet.');
end;

function TRSClient.isUpText(text: String): Boolean;
begin
  writeln('Warning: TRSClient.isUpText(text: String) has not been implemented yet.');
end;
