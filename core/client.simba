type
  TRSClient = type Pointer;

var
  RSClient: TRSClient;

const
  __SETTING_COUNT = 2000;

function TRSCLient.getString(address: Integer): String;
begin
  SetLength(result, smartStringFromString(smartCurrentTarget, address, result));
  result := replace(result, 'Ã‚', '', [rfReplaceAll]);
  result := replace(result, #160, #32, [rfReplaceAll]);
end;

function TRSClient.getSettingsArray: TIntegerArray;
var
  I: Integer;
begin
  setLength(result, __SETTING_COUNT);
  for I := 0 to __SETTING_COUNT - 1 do
    result[I] := smartGetFieldArrayInt(smartCurrentTarget, 0, client_settings, I);
end;

function TRSClient.getSetting(index: Integer): Integer;
var
  settings: TIntegerArray;
begin
  if ((index >= __SETTING_COUNT) or (index < 0)) then
    exit(-1);
  settings := self.getSettingsArray;
  result := settings[index];
end;

function TRSClient.getCameraPitch: Integer;
begin
  result := smartGetFieldInt(smartCurrentTarget, 0, client_cameraPitch) * client_cameraPitch_Multiplier;
end;

function TRSClient.getCameraYaw: Integer;
begin
  result := smartGetFieldInt(smartCurrentTarget, 0, client_cameraYaw) * client_cameraYaw_Multiplier;
end;

function TRSClient.getCameraPosition: TPoint3D;
begin
  result.X := smartGetFieldInt(smartCurrentTarget, 0, client_cameraX) * client_cameraX_Multiplier;
  result.Y := smartGetFieldInt(smartCurrentTarget, 0, client_cameraY) * client_cameraY_Multiplier;
  result.Z := smartGetFieldInt(smartCurrentTarget, 0, client_cameraZ) * client_cameraZ_Multiplier;
end;

procedure TRSClient.setupCurves;
var
  I: Integer;
begin
  setLength(CURVESIN, 2048);
  setLength(CURVECOS, 2048);
  for I := 0 to 2047 do begin
    CURVESIN[I] := round(65536.0 * sin(I * 0.0030679614999999999));
    CURVECOS[I] := round(65536.0 * cos(I * 0.0030679614999999999));
  end;
end;
