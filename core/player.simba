type
  TPlayer = record(TBase)
    name, pass, pin: String;
    active: Boolean;
  end;

const
  SKILL_COUNT         = 28;
  SKILL_ATTACK        = 0;
  SKILL_DEFENCE       = 1;
  SKILL_STRENGTH      = 2;
  SKILL_HITPOINTS     = 3;    SKILL_HP = SKILL_HITPOINTS;
  SKILL_RANGE         = 4;
  SKILL_PRAYER        = 5;
  SKILL_MAGIC         = 6;
  SKILL_COOKING       = 7;
  SKILL_WOODCUTTING   = 8;
  SKILL_FLETCHING     = 9;
  SKILL_FISHING       = 10;
  SKILL_FIREMAKING    = 11;
  SKILL_CRAFTING      = 12;
  SKILL_SMITHING      = 13;
  SKILL_MINING        = 14;
  SKILL_HERBLORE      = 15;
  SKILL_AGILITY       = 16;
  SKILL_THIEVING      = 17;
  SKILL_SLAYER        = 18;
  SKILL_FARMING       = 19;
  SKILL_RUNECRAFTING  = 20;
  SKILL_HUNTER        = 21;
  SKILL_CONSTRUCTION  = 22;

procedure TPlayer.__destroy;
begin
  if (self.__object <> 0) then
    smartFreeObject(smartCurrentTarget, self.__object);
end;

procedure TPlayer.__update;
begin
  self.__destroy;
  self.__object := smartGetFieldObject(smartCurrentTarget, 0, client_player);
end;

function TPlayer.getName: String;
var
  _playerName: Integer;
begin
  self.__update;
  _playerName := smartGetFieldObject(smartCurrentTarget, self.__object, Player_name);
  Result := RSClient.getString(_playerName);
  smartFreeObject(smartCurrentTarget, _playerName);
end;

function TPlayer.getTile: TPoint; override;
begin
  self.__update;
  result.X := (smartGetFieldInt(smartCurrentTarget, 0, client_baseX) * client_baseX_Multiplier) + (smartGetFieldInt(smartCurrentTarget, Self.__Object, Actor_localX) * Actor_localX_Multiplier) div 128;
  result.Y := (smartGetFieldInt(smartCurrentTarget, 0, client_baseY) * client_baseY_Multiplier) + (smartGetFieldInt(smartCurrentTarget, Self.__Object, Actor_localY) * Actor_localY_Multiplier) div 128;
end;

function TPlayer.onTile(tile: TPoint): Boolean;
begin
  result := self.getTile().equals(tile);
end;

function TPlayer.getDistance(P: TPoint): Integer; override;
begin
  result := self.getTile().getDistance(P);
end;

function TPlayer.getAnimation: Integer;
begin
  self.__update;
  result := smartGetFieldInt(smartCurrentTarget, self.__object, Actor_animation)  * Actor_animation_Multiplier;
end;

function TPlayer.isAnimating: Boolean;
begin
  Result := (self.getAnimation() > -1);
end;

function TPlayer.waitAnimating(time: Integer): Boolean;
var
  timer: Integer;
begin
  markTime(timer);
  while ((self.getAnimation() = -1) and (timeFromMark(timer) < time)) do
    sleep(100);
  result := (not (self.getAnimation() = -1));
end;

function TPlayer.getSkillLevel(skill: Integer): Integer;
begin
  result := smartGetFieldArrayInt(smartCurrentTarget, 0, client_levels, skill);
end;

function TPlayer.getMaxSkillLevel(skill: Integer): Integer;
begin
  result := smartGetFieldArrayInt(smartCurrentTarget, 0, client_real_levels, skill);
end;

function TPlayer.getExperience(skill: Integer): Integer;
begin
  result := smartGetFieldArrayInt(smartCurrentTarget, 0, client_experiences, skill);
end;

function TPlayer.getHealth: Integer;
begin
  self.getSkillLevel(SKILL_HITPOINTS);
end;

function TPlayer.getMaxHealth: Integer;
begin
  self.__update;
  result := smartGetFieldInt(smartCurrentTarget, self.__object, Actor_maxHealth) * Actor_maxHealth_Multiplier;
end;

function TPlayer.getHealthPercent: Extended;
begin
  if (self.getHealth() = 0) then
    exit(0.0);

  result := (self.getHealth() / self.getMaxHealth()) * 100.0;
end;

function TPlayer.getRunEnergy: Integer;
begin
  result := smartGetFieldInt(smartCurrentTarget, 0, client_run_energy) * client_run_energy_Multiplier;
end;

function TPlayer.isAutoRetaliateOn: Boolean;
begin
  result := (RSClient.getSetting(172) = 0);
end;

function TPlayer.isRunOn: Boolean;
begin
  result := (RSClient.getSetting(173) = 1);
end;

function TPlayer.isPoisoned: Boolean;
begin
  result := (RSClient.getSetting(102) > 0);
end;

function TPlayer.isAutoCastOn: Boolean;
begin
  result := (RSClient.getSetting(108) > 0);
end;

function TPlayer.getSpecialAttackPercent: Extended;
begin
  result := (RSClient.getSetting(300) / 10.0);
end;

function TPlayer.getWeight: Integer;
begin
  result := smartGetFieldInt(smartCurrentTarget, 0, client_weight) * client_weight_Multiplier;
end;

function TPlayer.getLoginState: Integer;
begin
  result := smartGetFieldInt(smartCurrentTarget, 0, client_login_state) * client_login_state_Multiplier;
end;

function TPlayer.getPlane: Integer;
begin
  result := smartGetFieldInt(smartCurrentTarget, 0, client_plane) * client_plane_Multiplier;
end;

function TPlayer.inFight: Boolean;
begin
  writeln('Warning: TPlayer.inFight has not been implemented yet.');
end;
